Materials
~~~~~~~~~

This draft document describes a possible design for material objects.

The materials should be used in order to instantiate objects of differents
types.

Terminology: A material is an object from which objects can be extracted.

Summary
~~~~~~~~~

1. Basic ideas
2. Problems
3. Propositions to solve those problems
4. Use-cases
5. API draft
   A. Material API draft
   B. Source material API draft
   C. Project material API draft
   D. ExtractableObject/Material Interface API draft
   E. Methods that should be added to other classes

1. Basic ideas
~~~~~~~~~~~~~~~

Basically, material is a way of avoiding duplicating data in timeline objects and solution
which will allow to have one common registry for timeline sources and timeline operations.

    * There will be a listing of avalaible, ready to use materials
    * Material allow to create some particular types of object that implment the GESExtractable
      interface
    * Materials will hold metadatas
    * Materials can be either, created by the user, or will be created by GStreamer itself
      when initializing, there should be a way to disable that feature on demand.

Some ideas of material(especially for TimelineSource objects) can be found in docs/random/design.

2. Problems (Not in any particular order)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    1) We have avoid to various times the same file on the system
    2) We must be able to query materials by some criteria
        a. By type of TimelineObject that it can produce
        b. By type of supported tracks
        c. Should we have filters by some specific properties of source material
           - like duration, width, height, etc?
    3) We must be able to get reference to origin material of any extracted object
    4) We need a way to descibre projects
    5) GESMaterials can be instanciated asyncronously
    6) The instanciation of a material can fail
    7) Users need to get informations about the instanciation failure
    8) User should be able to cancell the creation of a GESMaterial (especially
       in case of async Material creation)

3. Propositions to solve those problems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    1) We should have an interface that needs to be implemented by classes that need to be extractable.
       We can call it GESExtractable. It should be responsible for:
          * letting the user get the Material from which an extracted object comes from
          * Making it possible to instanciate a GESMaterial only from a GType which means that:
              - It needs to contain a reference to a GES_TYPE_MATERIAL (or subclass) so the proper GESMaterial type will be instanciatated.
              - It need to contain some mapping between the ID (string) of the material, and the property of the object that is used as its ID.
                For a property to be usable as an ID for its material, each objects extracted from a same material must have the same value for the property
                Examples:
                    GESTimelineFileSource -> URI
                    GESTrackParseLaunchEffect -> bin_description

    2) A list of all avalaible, ready to be used materials should be cached  and
       reused whenever it is possible.
        Basically it will look like:
          GESMaterial.id -> material
       (the ID is computed thanks to the mapping)

      There should be a way to specify that a GESMaterial can not be cached. For
      example it doesn't make sense to cache a material that has GES_TYPE_TIMELINE as
      extractable_type.

    4) To allow users to implement some sort of library (media, effects, transitions...)
       we must be able to query materials by using some criteria,
        e.g. GType of the extractable object, URI, supported track types

    5) We can instanciate a GESMaterial only from a GType, the appropriate checks need
       to be done and it can return subclasses of GESMaterial thanks to the
       information included in the GESExtractable interface.

        -> GESMaterial will implement the GInitable interface so that the instanciation of an object can fail.

    6) Instanciation can happen asyncronously in some cases. For example, a
       material that  needs to discover a file to be properly filled needs.

        -> GESMaterial will implement the GAsyncInitable interface for that.

4. Use cases
~~~~~~~~~~~~~
    UC-1. Define media files and discover them
    UC-2. Define project - reference all materials
    UC-3. Define titles
    UC-4. Define operations
        - Transitions - 1 material per transition type
        - Effects - 1 material per effects type
        - TextOverlay
    UC-5. Handle metadata
    UC-6. Add operations (only effects?) to a GESTimelineObject
    UC-7. User want to 'invent' a new operation, we need to be able
          to let him define it
    UC-8. The user want to make an object from a GESMaterial


5. API Draft
~~~~~~~~~~~~

A. Extended API for GObject/GParamFlags
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We should define a GES_PARAM_FLAGS_CONSTRUCT_MANDATORY so we can now what
properties are mandatory to instanciate a GESMaterial

B. GESExtractable API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GESExtractable is responsable for telling what GESMaterial subclass need to
be instanciated.

/**
 * ges_extractable_object_get_material:
 * @object: Target object
 * Method to get material which was used to instaniate specified object
 * Returns: origin material
 */
GESMaterial *
ges_extractable_get_material(GESExtractable *extractable);

/**
 * ges_extractable_get_material_type:
 * @class: Get the #GType of the GESMaterial that should be used to extract
 * the object that implements that #GESExtractable interface
 *
 * Lets user know the type of GESMaterial that should be used to extract the
 * object that implement that interface.
 */
GType
ges_extractable_get_material_type (GESExtractableClass *class)

/**
 * ges_extractable_class_list_mandatory_properties:
 * @class: The #GObject subclass that implement #GESExtractable
 * @n_properties: (out): return location for the length of the returned array.
 *
 * Lists all the properties that needs to be passed to #ges_material_new to
 * be able to instanciate a #GESMaterial for the #GType pass to that same
 * function
 *
 * Returns: (array length=n_properties)(transfer container): an array of
 * GParamSpec* which should be freed after use.
 */
GParamSpec **
ges_extractable_class_list_mandatory_properties (GESExtractable *extractable);


A. Material And subclasses API draft
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

a) GESMaterial
|  ~~~~~~~~~~~
|
|  implements GInitable, GAsyncInitable and in the future, GESMetdata
|
|  /**
|   * ges_material_new_full:
|   * @extractable_type: The #GType of the object that can be extracted from the new material.
|   * The class must implement the #GESExtractable
|   * @cancellable: (allow-none): optional #GCancellable object, %NULL to ignore.
|   * @error: (allow-none): a #GError location to store the error occurring, or %NULL to ignore.
|   * @...: the value if the first property, followed by and other property value pairs, and ended by NULL.
|   *
|   * Returns: Created material or reference to existing one if it was created earlier or %NULL on error
|   */
|  GESMaterial *
|  ges_material_new (GType extractable_type, GCancellable *cancellable, GError **error,
|    gchar *first_property, ...)
|
|->b) GESTimelineObjectMaterial
|  |  ~~~~~~~~~~~~~~~~~~~~~~~~~
|  |  /**
|  |   * ges_material_timeline_object_get_track_types:
|  |   * @material: a #GESTimelineObjectMaterial
|  |   *
|  |   * Method that returns track types that are supported by given material
|  |   *
|  |   * Returns: Track types that are supported by material
|  |   */
|  |  GESTrackType
|  |  ges_material_timeline_object_get_track_types (GESTimelineObjectMaterial *material);
|  |
|  |
|  |-> c) GESFileSourceMaterial
|         ~~~~~~~~~~~~~~~~~~~~~
|      /**
|       * ges_material_file_source_get_stream_info:
|       * @material: a #GESMaterial of extractable_type GES_TIMELINE_FILE_SOURCE
|       * Method that returns discoverer data of specified material so user could work with
|       * it directly
|       * Returns: discover info of material
|       */
|      GstDiscovererStreamInfo *
|      ges_material_file_source_get_stream_info (const GESMaterial *material);
|
|
|-> d) GESProjectMaterial material API
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    A project is a GESMaterial that has GES_TYPE_TIMELINE or subclasses as extractable_type

    FIXME: This special case that should be thought thoroughly.

    /**
     * ges_material_project_list_materials:
     * @material: Project material
     * @type: Type of material to list
     * Method for listing materials of specified type that are available in
     * particular project.
     *
     * Returns: list of available materials of given type in project
     */
    ges_material_project_list_materials (GESMaterial *project,
                                       GType type)

E. Methods that should be added to other classes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/**
 * ges_timeline_layer_add_material:
 *
 * Creates TimelineObject from material, adds it to layer and
 * returns reference to it.
 *
 * Returns: Created #GESTimelineObject
 */
GESTimelineObject * ges_timeline_layer_add_material   (GESTimelineLayer *layer,
                                                       GESTimelineObjectMaterial *material,
                                                       GstClockTime start,
                                                       GstClockTime inpoint,
                                                       GstClockTime duration,

/**
 * ges_timeline_remove_extracted_from_material:
 * @timeline: A #GESTimeline from which to remove objects
 * @material: The #GESTimelineObjectMaterial to remove from @timeline
 *
 * Removes all material in @timeline that have been extracted from @material
 *
 * Returns: %TRUE if everything could be done properly %FALSE otherwize
 */
gboolean ges_timeline_layer_add_material   (GESTimeline *timeline, GESMaterial *material);

/**
 * ges_timeline_object_add_material:
 * @object: Target #GESTimelineObject
 * @material: a #GESMaterial that must have a GES_TYPE_TRACK_OPERATION as extractable_type
 * @priority: The priority of the new #GESTrackObject
 *
 * Adds an operation (GESTrackObject(s)) to a GESTimelineObject
 *
 * Returns: (transfer full):The newly created #GESTrackObject.
 */
GESTrackObject
ges_timeline_object_add_material (GESTimelineObject *object,
                                  GESMaterial *material,
                                  guint32 priority);
