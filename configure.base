dnl Note: this file is generated from configure.base by autogen.sh
SUBSTFOR configure.ac:AC_INIT
SUBSTFOR configure.ac:AC_CONFIG_SRCDIR([gnl/gnlsource.h])
SUBSTFOR configure.in:AC_INIT(gnl/gnlsource.h)

SUBSTFOR configure.ac:AC_CANONICAL_TARGET([])
SUBSTFOR configure.in:AC_CANONICAL_SYSTEM

AM_CONFIG_HEADER(config.h)

GNL_VERSION_MAJOR=0
GNL_VERSION_MINOR=0
GNL_VERSION_MICRO=1
GNL_VERSION=$GNL_VERSION_MAJOR.$GNL_VERSION_MINOR.$GNL_VERSION_MICRO

PACKAGE=gnonlin
VERSION=$GNL_VERSION

AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

dnl libtool
GNL_CURRENT=0
GNL_REVISION=0
GNL_AGE=0
GNL_LIBVERSION=$GNL_CURRENT:$GNL_REVISION:$GNL_AGE

AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
dnl Add parameters for aclocal
dnl (This must come after AM_INIT_AUTOMAKE, since it modifies ACLOCAL)
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

AC_SUBST(GNL_VERSION_MAJOR)
AC_SUBST(GNL_VERSION_MINOR)
AC_SUBST(GNL_VERSION_MICRO)
AC_SUBST(GNL_VERSION)

AC_SUBST(GNL_CURRENT)
AC_SUBST(GNL_REVISION)
AC_SUBST(GNL_AGE)
AC_SUBST(GNL_LIBVERSION)


AM_MAINTAINER_MODE

AC_PROG_CC
AC_PROG_CXX
AC_PROG_CXXCPP
AC_ISC_POSIX
SUBSTFOR configure.ac:AC_HEADER_STDC([])
SUBSTFOR configure.in:AC_STDC_HEADERS
AC_ARG_PROGRAM

dnl We disable static building for development, for time savings
dnl *NOTE*: dnl this line before release, so release does static too
AM_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

CFLAGS=""

dnl This is used for the -config script...
builddir=`pwd`
AC_SUBST(builddir)

dnl ##############################
dnl # Do automated configuration #
dnl ##############################

dnl Check for tools:
dnl ================

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

dnl check for gtkdoc
AC_CHECK_PROG(HAVE_GTK_DOC, gtkdoc-mkdb, true, false)
AC_CHECK_PROG(HAVE_GTK_DOC, gtkdoc-scanobj, :, false)
AC_CHECK_PROG(HAVE_GTK_DOC, gtkdoc-scan, :, false)
AC_CHECK_PROG(HAVE_GTK_DOC, gtkdoc-mktmpl, :, false)
AC_CHECK_PROG(HAVE_GTK_DOC, gtkdoc-mkdb, :, false)
AC_CHECK_PROG(HAVE_GTK_DOC, gtkdoc-mkhtml, :, false)
AC_CHECK_PROG(HAVE_GTK_DOC, gtkdoc-fixxref, :, false)

dnl check for docbook tools
AC_CHECK_PROG(HAVE_DB2HTML, db2html, true, false)
AC_CHECK_PROG(HAVE_DB2PS, db2ps, true, false)
AC_CHECK_PROG(HAVE_PS2PDF, ps2pdf, true, false)

dnl check for image conversion tool
AC_CHECK_PROG(HAVE_FIG2DEV, fig2dev, true, false)

dnl The following is a hack: if fig2dev doesn't display an error message
dnl for the desired type, we assume it supports it.
HAVE_FIG2DEV_PNG=false
if test "x$HAVE_FIG2DEV" = "xtrue" ; then
  fig2dev_quiet=`fig2dev -L png </dev/null 2>&1 >/dev/null`
  if test "x$fig2dev_quiet" = "x" ; then
    HAVE_FIG2DEV_PNG=true
  fi
fi
HAVE_FIG2DEV_EPS=false
if test "x$HAVE_FIG2DEV" = "xtrue" ; then
  fig2dev_quiet=`fig2dev -L eps </dev/null 2>&1 >/dev/null`
  if test "x$fig2dev_quiet" = "x" ; then
    HAVE_FIG2DEV_EPS=true
  fi
fi


dnl Check for essential libraries first:
dnl ====================================

dnl Check for glib2
GNL_CHECK_FEATURE(GLIB2, [use of glib-2.0 and GObject], , [
  PKG_CHECK_MODULES(GLIB2, glib-2.0 gobject-2.0 gthread-2.0 gmodule-2.0,
    HAVE_GLIB2=yes,HAVE_GLIB2=no)
  AC_SUBST(GLIB2_LIBS)
  AC_SUBST(GLIB2_CFLAGS)
], disabled, [
  CORE_LIBS="$CORE_LIBS $GLIB2_LIBS"
  CORE_CFLAGS="$CORE_CFLAGS $GLIB2_CFLAGS"

  AC_DEFINE(USE_GLIB2)
  GNL_DEFINE_CFLAGS="$GNL_DEFINE_CFLAGS -DUSE_GLIB2"
])
AC_SUBST(USE_GLIB2)

dnl FIXME: check for gtk2 and gnome2 - these conditionals are currently
dnl always false.
AM_CONDITIONAL(USE_GTK2, test "x$USE_GTK2" = "xyes")
AC_SUBST(USE_GTK2)
AM_CONDITIONAL(USE_GNOME2, test "x$USE_GNOME2" = "xyes")
AC_SUBST(USE_GNOME2)

if test x$USE_GLIB2 = xno; then
  dnl Check for glib and gtk
  AM_PATH_GLIB(1.2.0,,
              AC_MSG_ERROR(Cannot find glib: Is glib-config in path?),
              glib gmodule gthread)
  AM_PATH_GTK(1.2.0,,
              AC_MSG_ERROR(Cannot find gtk: Is gtk-config in path?))

  CORE_LIBS="$CORE_LIBS $GLIB_LIBS $GTK_LIBS"
  CORE_CFLAGS="$CORE_CFLAGS $GLIB_CFLAGS $GTK_CFLAGS"
fi

AC_MSG_CHECKING(GStreamer flags)
if $PKG_CONFIG --exists gstreamer ; then
  GST_LIBS=`$PKG_CONFIG --libs gstreamer`
  GST_CFLAGS=`$PKG_CONFIG --cflags gstreamer`

  CORE_LIBS="$CORE_LIBS $GST_LIBS"
  CORE_CFLAGS="$CORE_CFLAGS $GST_CFLAGS"

  AC_MSG_RESULT($GST_CFLAGS $GST_LIBS)
else
  AC_MSG_ERROR([
*** GStreamer not found.
])
fi

dnl Check for libxml
AC_PATH_PROG(XML_CONFIG, xml-config, no)
if test x$XML_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find xml-config)
fi
xml_save_LIBS=$LIBS
xml_save_CFLAGS=$CFLAGS
XML_LIBS=`xml-config --libs`
XML_CFLAGS=`xml-config --cflags`
LIBS=$XML_LIBS
CFLAGS=$XML_CFLAGS
AC_CHECK_LIB(xml, xmlDocGetRootElement, ,
  [ AC_MSG_ERROR(Need version 1.8.1 or better of libxml) ],
  $XML_LIBS)
LIBS=$xml_save_LIBS
CFLAGS=$xml_save_CFLAGS
AC_SUBST(XML_LIBS)
AC_SUBST(XML_CFLAGS)
CORE_LIBS="$CORE_LIBS $XML_LIBS"
CORE_CFLAGS="$CORE_CFLAGS $XML_CFLAGS"


dnl ==========================================================================
dnl ========================= Macro definitions ==============================
dnl ==========================================================================

if test x$USE_GLIB2 = xyes; then
  dnl we don't support gnome/gtk with glib2.0 yet
  GNOME_LIBS=
  GNOME_CFLAGS=
  HAVE_GNOME=no
  AC_MSG_WARN(gnome disabled for glib2.0)
else
  dnl Check for libgnome
  GNL_CHECK_CONFIGPROG(GNOME, gnome-config, gnome gnomeui)
fi

dnl Check for libglade
HAVE_LIBGLADE_GNOME="no"
if test x$USE_GLIB2 = xyes; then
  dnl no glade for glib2.0
  LIBGLADE_GNOME_LIBS=
  LIBGLADE_GNOME_CFLAGS=
  AC_MSG_WARN(libglade disabled for glib2.0)
else
  AC_PATH_PROG(LIBGLADE_CONFIG_PATH, libglade-config, no)
  if test x$LIBGLADE_CONFIG_PATH = xno; then
    AC_MSG_WARN(Couldn't find libglade-config - Can't build gnlplay)
    LIBGLADE_GNOME_LIBS=
    LIBGLADE_GNOME_CFLAGS=
  else
    LIBGLADE_GNOME_LIBS=`libglade-config --libs gnome`
    LIBGLADE_GNOME_CFLAGS=`libglade-config --cflags gnome`
    libglade_save_CFLAGS="$CFLAGS"
    libglade_save_LIBS="$LIBS"
    CFLAGS="$CFLAGS $LIBGLADE_GNOME_CFLAGS $GTK_CFLAGS"
    LIBS="$LIBS $LIBGLADE_GNOME_LIBS $GTK_LIBS"
    AC_TRY_LINK([#include <glade/glade.h>],[glade_gnome_init();],
  	        HAVE_LIBGLADE_GNOME="yes",
	        AC_MSG_WARN(
      [Couldn't find gnome libraries for libglade - Can't build gnlmediaplay and gnleditor])
	     )
    CFLAGS="$libglade_save_CFLAGS"
    LIBS="$libglade_save_LIBS"
  fi
fi
AC_SUBST(LIBGLADE_GNOME_LIBS)
AC_SUBST(LIBGLADE_GNOME_CFLAGS)

dnl Check for atomic.h
dnl Note: use AC_CHECK_HEADER not AC_CHECK_HEADERS, because the latter
dnl defines the wrong default symbol as well (HAVE_ASM_ATOMIC_H)
AC_CHECK_HEADER(asm/atomic.h, HAVE_ATOMIC_H=yes, HAVE_ATOMIC_H=no)
dnl Do a compile to check that it has atomic_set (eg, linux 2.0 didn't)
if test x$HAVE_ATOMIC_H = xyes; then
  AC_TRY_RUN([
#include "asm/atomic.h"
main() { atomic_t t; atomic_set(&t,0); atomic_inc(&t); atomic_add(1,&t);return 0;}
  ],, [
    # Not successful
    if test x$HAVE_ATOMIC_H = xyes; then
      AC_MSG_WARN(Atomic reference counting is out of date: doing without.)
    fi
    HAVE_ATOMIC_H=no
  ], [
    # Cross compiling
    AC_MSG_RESULT(yes)
    AC_MSG_WARN(Can't check properly for atomic reference counting.  Assuming OK.)
  ])
fi


dnl ######################################################################
dnl # Check command line parameters, and set shell variables accordingly #
dnl ######################################################################

AC_ARG_ENABLE(libmmx,
[  --enable-libmmx              use libmmx, if available],
[case "${enableval}" in
  yes) USE_LIBMMX=$HAVE_LIBMMX ;;
  no)  USE_LIBMMX=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-libmmx) ;;
esac], 
[USE_LIBMMX=$HAVE_LIBMMX]) dnl Default value

AC_ARG_ENABLE(atomic,
[  --enable-atomic              use atomic reference counting header],
[case "${enableval}" in
  yes) USE_ATOMIC_H=$HAVE_ATOMIC_H;;
  noset) USE_ATOMIC_H=$HAVE_ATOMIC_H;;
  no)  USE_ATOMIC_H=no;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-atomic) ;;
esac], 
[USE_ATOMIC_H=$HAVE_ATOMIC_H]) dnl Default value

AC_ARG_ENABLE(plugin-builddir,
[  --enable-plugin-builddir     allow tests/demos to use non-installed plugins ],
[case "${enableval}" in
  yes) PLUGINS_USE_BUILDDIR=yes ;;
  no)  PLUGINS_USE_BUILDDIR=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-plugin-builddir) ;;
esac], 
[PLUGINS_USE_BUILDDIR=no]) dnl Default value

AC_ARG_ENABLE(debug,
[  --enable-debug               compile with -g debugging info],
[case "${enableval}" in
  yes) USE_DEBUG=yes ;;
  no)  USE_DEBUG=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
esac], 
[USE_DEBUG=no]) dnl Default value

AC_ARG_ENABLE(DEBUG,
[  --enable-DEBUG               compiles in a large number of debugging messages],
[case "${enableval}" in
  yes) ENABLE_DEBUG=yes ;;
  no)  ENABLE_DEBUG=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-DEBUG) ;;
esac], 
[ENABLE_DEBUG=no]) dnl Default value
if test x$ENABLE_DEBUG = xyes; then
  AC_DEFINE(GNL_DEBUG_ENABLED, 1, [Define if DEBUG statements should be compiled in])
fi

AC_ARG_ENABLE(INFO,
[  --disable-INFO               disables compilation of informational messages],
[case "${enableval}" in
  yes) ENABLE_INFO=yes ;;
  no)  ENABLE_INFO=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-INFO) ;;
esac], 
[ENABLE_INFO=yes]) dnl Default value
if test x$ENABLE_INFO = xyes; then
  AC_DEFINE(GNL_INFO_ENABLED, 1, [Define if INFO statements should be compiled in])
fi

AC_ARG_ENABLE(debug-color,
[  --disable-debug-color        disables color output of DEBUG and INFO output],
[case "${enableval}" in
  yes) ENABLE_DEBUG_COLOR=yes ;;
  no)  ENABLE_DEBUG_COLOR=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug-color) ;;
esac], 
[ENABLE_DEBUG_COLOR=yes]) dnl Default value
if test "x$ENABLE_DEBUG_COLOR" = xyes; then
  AC_DEFINE(GNL_DEBUG_COLOR, 1, [Define if debugging messages should be colorized])
fi

AC_ARG_ENABLE(profiling,
[  --enable-profiling           adds -pg to compiler commandline, for profiling],
[case "${enableval}" in
  yes) USE_PROFILING=yes ;;
  no)  UES_PROFILING=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-profiling) ;;
esac], 
[USE_PROFILING=no]) dnl Default value

dnl Default value
GNL_CONFIG_DIR=${sysconfdir}/gnonlin
AC_ARG_WITH(configdir,
[  --with-configdir             specify path to use for configdir],
[case "${withval}" in
  yes) AC_MSG_ERROR(bad value ${withval} for --with-configdir) ;;
  no) AC_MSG_ERROR(bad value ${withval} for --with-configdir) ;;
  *) GNL_CONFIG_DIR="${withval}" ;;
esac], 
[:]) dnl Default value

AC_ARG_ENABLE(docs-build,
[  --enable-docs-build          enable building of documentation],
[case "${enableval}" in
  yes) BUILD_DOCS=yes ;;
  no)  BUILD_DOCS=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-docs-build) ;;
esac], 
[BUILD_DOCS=no]) dnl Default value

AC_ARG_ENABLE(plugin-docs,
[  --enable-plugin-docs         enable the building of plugin documentation
                               (this is currently broken, so off by default)],
[case "${enableval}" in
  yes) BUILD_PLUGIN_DOCS=yes ;;
  no)  BUILD_PLUGIN_DOCS=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-plugin-docs) ;;
esac], 
[BUILD_PLUGIN_DOCS=no]) dnl Default value

AC_ARG_ENABLE(tests,
[  --disable-tests              disable building test apps],
[case "${enableval}" in
  yes) BUILD_TESTS=yes ;;
  no)  BUILD_TESTS=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --disable-tests) ;;
esac], 
[BUILD_TESTS=yes]) dnl Default value

AC_ARG_ENABLE(examples,
[  --disable-examples           disable building examples],
[case "${enableval}" in
  yes) BUILD_EXAMPLES=yes ;;
  no)  BUILD_EXAMPLES=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --disable-examples) ;;
esac], 
[BUILD_EXAMPLES=yes]) dnl Default value

dnl Next, check for the optional components:
dnl ========================================


AC_DEFUN(GNL_SUBSYSTEM_DISABLE,
[dnl
dnl Add a subsystem --disable flag and all the necessary symbols and substitions
dnl
AC_ARG_ENABLE(translit([$1], A-Z, a-z), 
[  ]builtin(format, --disable-%-17s  disable %s, translit([$1], A-Z, a-z), $2),
[ case "${enableval}" in
    yes) GNL_DISABLE_[$1]=no ;;
    no) GNL_DISABLE_[$1]=yes ;;
    *) AC_MSG_ERROR(bad value ${enableval} for --enable-translit([$1], A-Z, a-z)) ;;
  esac],
[GNL_DISABLE_[$1]=no]) dnl Default value
if test x$GNL_DISABLE_[$1] = xyes; then
  AC_DEFINE(GNL_DISABLE_[$1], 1, [Disable $2])
  GNL_DISABLE_[$1]_DEFINE=-DGNL_DISABLE_[$1]
fi
AM_CONDITIONAL(GNL_DISABLE_[$1], test x$GNL_DISABLE_[$1] = xyes)
AC_SUBST(GNL_DISABLE_[$1]_DEFINE)
GNL_SUBSYSTEM_DISABLE_DEFINES="$GNL_SUBSYTEM_DISABLE_DEFINES $GNL_DISABLE_[$1]_DEFINE"
])

GNL_SUBSYSTEM_DISABLE(LOADSAVE,[pipeline XML load/save])
GNL_SUBSYSTEM_DISABLE(TYPEFIND,[typefind plugin],)
GNL_SUBSYSTEM_DISABLE(AUTOPLUG,[autoplugger subsystem])
GNL_SUBSYSTEM_DISABLE(PARSE,[command-line parser])
GNL_SUBSYSTEM_DISABLE(TRACE,[tracing subsystem])

GNL_DEFINE_CFLAGS="$GNL_DEFINE_CFLAGS $GNL_SUBSYSTEM_DISABLE_DEFINES"


dnl ################################################
dnl # Set defines according to variables set above #
dnl ################################################


dnl These should be "USE_*" instead of "HAVE_*", but some packages expect
dnl HAVE_ and it is likely to be easier to stick with the old name

if test "x$USE_LIBMMX" = xyes; then
  AC_DEFINE(HAVE_LIBMMX, 1, [Define if libmmx is available])
fi

if test "x$USE_ATOMIC_H" = xyes; then
  AC_DEFINE(HAVE_ATOMIC_H, 1, [Define if atomic.h header file is available])
fi

if test "x$USE_DEBUG" = xyes; then
  CFLAGS="$CFLAGS -g"
fi

if test "x$USE_PROFILING" = xyes; then
  CFLAGS="$CFLAGS -pg"
  FOMIT_FRAME_POINTER=""
else
  FOMIT_FRAME_POINTER="-fomit-frame-pointer"
fi

dnl #############################
dnl # Set automake conditionals #
dnl #############################

dnl These should be "USE_*" instead of "HAVE_*", but some packages expect
dnl HAVE_ and it is likely to be easier to stick with the old name
AM_CONDITIONAL(HAVE_LIBMMX,         test "x$USE_LIBMMX" = "xyes")
AM_CONDITIONAL(HAVE_ATOMIC_H,       test "x$USE_ATOMIC_H" = "xyes")
AM_CONDITIONAL(HAVE_LIBGLADE_GNOME, test "x$HAVE_LIBGLADE_GNOME" = "xyes")
AM_CONDITIONAL(HAVE_GNOME,          test "x$HAVE_GNOME" = "xyes")
AM_CONDITIONAL(HAVE_GTK_DOC,        $HAVE_GTK_DOC)
AM_CONDITIONAL(BUILD_DOCS,          test "x$BUILD_DOCS" = "xyes")
AM_CONDITIONAL(BUILD_TESTS,         test "x$BUILD_TESTS" = "xyes")
AM_CONDITIONAL(BUILD_EXAMPLES,      test "x$BUILD_EXAMPLES" = "xyes")
AM_CONDITIONAL(HAVE_DB2HTML,        $HAVE_DB2HTML)
AM_CONDITIONAL(HAVE_DB2PS,          $HAVE_DB2PS)
AM_CONDITIONAL(HAVE_PS2PDF,         $HAVE_PS2PDF)
AM_CONDITIONAL(HAVE_FIG2DEV_PNG,    $HAVE_FIG2DEV_PNG)
AM_CONDITIONAL(HAVE_FIG2DEV_EPS,    $HAVE_FIG2DEV_EPS)


dnl ############################
dnl # Set up some more defines #
dnl ############################

dnl Set location of configuration dir.
dnl AC_DEFINE_UNQUOTED(GNL_CONFIG_DIR,"$GNL_CONFIG_DIR")
AC_SUBST(GNL_CONFIG_DIR)


dnl ##############################
dnl # Set up the defaults cflags #
dnl ##############################
dnl CC="kgcc"
if test "x$USE_PROFILING" = xyes; then
  CFLAGS="$CORE_CFLAGS $CFLAGS -Wall"
else
  CFLAGS="$CORE_CFLAGS $CFLAGS -O6 -Wall"
fi
LIBS="$CORE_LIBS $LIBS"
AC_SUBST(CORE_LIBS)
AC_SUBST(CORE_CFLAGS)

dnl Vars for everyone else
GNL_LIBS="\$(top_builddir)/gnl/libgnl.la"
GNL_CFLAGS="-I\$(top_srcdir) -I\$(top_srcdir)/include"
AC_SUBST(GNL_LIBS)
AC_SUBST(GNL_CFLAGS)

dnl Private vars for libgnl only
LIBGNL_LIBS="$LIBS"
LIBGNL_CFLAGS="$CFLAGS $GNL_CFLAGS"
AC_SUBST(LIBGNL_LIBS)
AC_SUBST(LIBGNL_CFLAGS)

dnl CFLAGS for everyone else
CFLAGS="$GNL_CFLAGS $CFLAGS"

dnl Needed to make automake 1.4g happy.
dnl FIXME: find as properly, rather than just using CC
AS="\$(CC)"

dnl Having to AC_SUBST these is messy, but doesn't seem to do any harm.
dnl I'm not sure whether it's really necessary, but it removes some warnings
dnl when automake 1.4g runs, and may be beneficial elsewhere.
AC_SUBST(LIBS)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(AS)
AC_SUBST(ASFLAGS)

AC_SUBST(GNL_DEFINE_CFLAGS)

dnl #############################
dnl # Configure the subpackages #
dnl #############################

dnl AC_CONFIG_SUBDIRS(gist)
dnl AC_CONFIG_SUBDIRS(plugins/mp3decode/xing/libxing)

dnl ##################################################
dnl # Prepare informative messages to display at end #
dnl ##################################################


dnl #########################
dnl # Make the output files #
dnl #########################

SUBSTFOR configure.ac:AC_OUTPUT(
SUBSTFOR configure.ac:Makefile
SUBSTFOR configure.in:AC_OUTPUT([Makefile
gnl/Makefile
gnl/gnlversion.h
test/Makefile
stamp.h
gnonlin-config
gnonlin.pc
gnonlin-uninstalled.pc
SUBSTFOR configure.in:])
SUBSTFOR configure.in:AC_OUTPUT_COMMANDS([chmod +x gnonlin-config;
SUBSTFOR configure.in:echo "$infomessages"], infomessages="$infomessages")
SUBSTFOR configure.ac:,chmod +x gnonlin-config
SUBSTFOR configure.ac:echo "$infomessages", infomessages="$infomessages"
SUBSTFOR configure.ac:)
